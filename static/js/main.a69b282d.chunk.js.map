{"version":3,"sources":["components/slide.js","components/menu.js","components/assets/data.js","components/slider.js","App.js","serviceWorker.js","index.js"],"names":["Slide","_ref","className","props","Object","objectWithoutProperties","classNames","join","react_default","a","createElement","src","currentImg","url","alt","text","Menu","_this","this","style","menuItems","map","index","key","data-menu","data-index","Component","sliderArray","Slider","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleMenuClick","bind","assertThisInitialized","changeSlide","rotateSlide","document","addEventListener","removeEventListener","event","undefined","target","dataset","menu","menuIndex","setTimeout","indexOf","currentImgState","setState","i","length","_this2","slides","slide","imgArray","data-slide-index","menu_Menu","App","slider_Slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a69b282d.chunk.js","sourcesContent":["'use static'\r\n\r\nimport React from 'react'\r\n\r\nconst Slide = ({ className, ...props }) => {\r\n    let classNames = ['slide', className].join(' ');\r\n    return (\r\n        <div className={classNames} >\r\n            <img className='bg-img' src={props.currentImg.url} alt={props.currentImg.alt} />\r\n            <h2 className='text'>{props.currentImg.text}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Slide;","'use static'\r\n\r\nimport React, { Component } from 'react';\r\n\r\nexport default class Menu extends Component {\r\n    render() {\r\n\r\n        let style = '';\r\n        let menuItems = [0, 1, 2, 3, 4].map((index) => {\r\n            style = 'menuBar';\r\n            if (this.props.currentImg[index] === 'visible') {\r\n                style += ' extended';\r\n            }\r\n            return (<div key={index} className={style} data-menu data-index={index}>\r\n                <div className='menuItem' data-menu data-index={index}></div>\r\n            </div>);\r\n        });\r\n\r\n        return (\r\n            <div className='menu'>\r\n                {menuItems}\r\n            </div>\r\n        );\r\n    }\r\n}","let sliderArray = [\r\n   { url: 'http://bloquo.cc/img/works/1.jpg', alt: 'image1', text: 'Lorem ipsum dolor sit amet' },\r\n   { url: 'http://bloquo.cc/img/works/2.jpg', alt: 'image2', text: 'Consectetur adipiscing elit' },\r\n   { url: 'http://bloquo.cc/img/works/3.jpg', alt: 'image3', text: 'Sed do eiusmod tempor incididunt' },\r\n   { url: 'http://bloquo.cc/img/works/4.jpg', alt: 'image4', text: 'Ut labore et dolore magna aliqua' },\r\n   { url: 'http://bloquo.cc/img/works/5.jpg', alt: 'image5', text: 'Ut enim ad minim veniam' }\r\n];\r\n\r\nexport default sliderArray;","'use static'\r\n\r\nimport React, { Component } from 'react';\r\nimport Slide from './slide';\r\nimport Menu from './menu';\r\nimport imgArray from './assets/data';\r\nimport './slider.css';\r\n\r\nexport default class Slider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentImg: [\r\n                'visible',\r\n                'invisible',\r\n                'invisible',\r\n                'invisible',\r\n                'invisible',\r\n            ],\r\n        };\r\n        this.handleMenuClick = this.handleMenuClick.bind(this);\r\n        this.changeSlide = this.changeSlide.bind(this);\r\n        this.rotateSlide = this.rotateSlide.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('click', this.handleMenuClick);\r\n        this.rotateSlide();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('click', this.handleMenuClick);\r\n    }\r\n\r\n    handleMenuClick(event) {\r\n        if (event.target.dataset.menu !== undefined) {\r\n\r\n            let menuIndex = event.target.dataset.index\r\n            this.changeSlide(menuIndex);\r\n        }\r\n    }\r\n\r\n    rotateSlide() {\r\n\r\n        let _this = this;\r\n\r\n        // If you don't want the slider to rotate automatically, comment from this line\r\n        setTimeout((index) => {\r\n            index++;\r\n            if (index > 4) index = 0;\r\n            _this.changeSlide(index);\r\n            _this.rotateSlide();\r\n        }, 5000, _this.state.currentImg.indexOf('visible'));\r\n        // Until this line\r\n\r\n    }\r\n\r\n    changeSlide(index) {\r\n        let currentImgState = this.state.currentImg;\r\n\r\n        this.setState(() => {\r\n            for (let i = 0; i < currentImgState.length; i++) {\r\n                currentImgState[i] = 'invisible';\r\n                if (i === +index) {\r\n                    currentImgState[i] = 'visible';\r\n                }\r\n            }\r\n            return {\r\n                currentImg: currentImgState,\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let slides = [0, 1, 2, 3, 4].map((index) => {\r\n            return (<Slide className={this.state.currentImg[index]} currentImg={imgArray[index]} data-slide-index={index} />);\r\n        });\r\n\r\n        return (\r\n            <div className='slider'>\r\n                <Menu currentImg={this.state.currentImg} />\r\n                {slides};\r\n            </div>\r\n        );\r\n    }\r\n}","'use static'\r\n\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport Slider from './components/slider';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Slider />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}